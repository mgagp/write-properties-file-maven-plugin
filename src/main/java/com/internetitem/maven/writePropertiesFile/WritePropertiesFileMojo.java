/**
 * Important notice: This software is the sole property of ACCEO Inc. and<br>
 * cannot be distributed and/or copied without the written permission of ACCEO Inc.
 * <p>
 * Copyright (c) 2017, ACCEO Inc., All rights reserved.
 */
package com.internetitem.maven.writePropertiesFile;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.util.Map;
import java.util.Properties;

import org.apache.commons.jexl3.JexlBuilder;
import org.apache.commons.jexl3.JexlContext;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlExpression;
import org.apache.commons.jexl3.MapContext;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;

/**
 * Create a Java Properties file
 *
 * @author Adam Batkin <adam@batkin.net>
 */
@Mojo(name = "write-properties-file", defaultPhase = LifecyclePhase.GENERATE_RESOURCES, threadSafe = true)
public class WritePropertiesFileMojo extends AbstractMojo {

    /**
     * Maven project.
     */
    @Parameter(property = "project", readonly = true)
    private MavenProject project;

    /**
     * Output directory (defaults to ${project.build.outputDirectory})
     */
    @Parameter(property = "outputDirectory", defaultValue = "${project.build.outputDirectory}", required = true)
    private File outputDirectory;

    /**
     * Filename where the properties are saved
     */
    @Parameter(property = "filename", required = true)
    private String filename;

    /**
     * Properties to save
     */
    @Parameter(property = "properties", required = true)
    private Properties properties;

    /**
     * Comment for properties file
     */
    @Parameter(property = "comment", defaultValue = "Generated by write-property-file Maven plugin")
    private String comment;

    /**
     * Create intermediate directories if necessary (defaults to true)
     */
    @Parameter(property = "createDirectory", defaultValue = "true")
    private boolean createDirectory;

    /**
     * Each value is interpreted as a JEXCL expression where the context has a "model" property which the maven model.
     */
    @Parameter(property = "interpretValueAsJexclExpression", defaultValue = "false")
    private boolean interpretValueAsJexclExpression;

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
        File finalFile = new File(this.outputDirectory, this.filename).getAbsoluteFile();
        String finalFilename = finalFile.getAbsolutePath();
        File finalDirectory = finalFile.getParentFile();
        String finalDirectoryName = finalDirectory.getAbsolutePath();

        if (!finalDirectory.exists()) {
            getLog().info("Creating directory " + finalDirectoryName);
            finalDirectory.mkdirs();
        }

        getLog().info("Saving properties to file " + finalFilename);
        FileOutputStream out = null;

        if (this.interpretValueAsJexclExpression) {
            JexlEngine jexl = new JexlBuilder().create();
            JexlContext jc = new MapContext();
            jc.set("model", this.project.getModel());
            for (Map.Entry<Object, Object> e : this.properties.entrySet()) {
                Object key = e.getKey();
                Object value = e.getValue();
                if (value instanceof String) {
                    String jexlExp = (String) value;
                    JexlExpression expr = jexl.createExpression(jexlExp);
                    Object o = expr.evaluate(jc);
                    this.properties.put(key, o.toString());
                }
            }
        }

        try {
            out = new FileOutputStream(finalFile);
            OutputStreamWriter writer = new OutputStreamWriter(out, Charset.forName("UTF-8"));

            String finalComment = this.comment;
            if (this.comment != null && this.comment.trim().isEmpty()) {
                finalComment = null;
            }
            this.properties.store(writer, finalComment);
            writer.close();
            out.close();
        }
        catch (IOException e) {
            throw new MojoFailureException("Unable to save properties to file " + finalFilename + ": " + e.getMessage(), e);
        }
        finally {
            if (out != null) {
                try {
                    out.close();
                }
                catch (Exception e) {
                    // Ignore
                }
            }
        }
    }

}
